/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pbfgenerationservice;

/**
 *
 * @author Mobolaji.Aina
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.*;
import java.util.Calendar;
import java.util.Date;
import javax.swing.WindowConstants;
import org.jdatepicker.impl.*;
import org.jdatepicker.*;
import java.text.SimpleDateFormat;
import java.util.logging.Handler;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
  
    class DatePicker {
        javax.swing.JDialog f1;
        
        public DatePicker(javax.swing.JFrame frame){
        
        f1 = new    javax.swing.JDialog(frame);
        f1.setLocationRelativeTo(frame);
        }
      public static DateModel<?>  dModel;
      
         Date GUI(String title) {
           
        javax.swing.JButton okBttn = new javax.swing.JButton("Ok");
        okBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f1.dispose();
            }
        });
        f1.setTitle(title);
       
        f1.setDefaultCloseOperation(   javax.swing.JFrame.DISPOSE_ON_CLOSE);
        f1.setModal(true);
        f1.setLayout(new FlowLayout());
        java.awt.Container conn = f1.getContentPane();
          UtilDateModel  model = new UtilDateModel();    
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");
        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        JDatePickerImpl datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());
        dModel  = datePicker.getModel();
        okBttn.setSize(30, 30);
        f1.add(datePicker);
        conn.add(okBttn);
     
    
        f1.setSize(300, 85);
        f1.setVisible(true);
        
        return (Date) dModel.getValue();
        
    }
    public DateModel<?> getModel(){
      return this.dModel;
    }

}

public class PbfServiceConfigurator extends javax.swing.JFrame {

 /**
     * Creates new form PbfServiceConfigurator
     */
    
    
public void showWarningMessage(String message, String title){
    	
    	JOptionPane.showMessageDialog(null, (Object)message, title, JOptionPane.WARNING_MESSAGE);
    	
    }
    public void showInformationMessage(String message, String title){
    	
    	JOptionPane.showMessageDialog(null, (Object)message, title, JOptionPane.INFORMATION_MESSAGE);
    	
    }
    public void showPlainMessage(String message, String title){
    	
    	JOptionPane.showMessageDialog(null, (Object)message, title, JOptionPane.PLAIN_MESSAGE);
    	
    }
 public void showErrorMessage(String message, String title){
    	
    	JOptionPane.showMessageDialog(null, (Object)message, title, JOptionPane.ERROR_MESSAGE);
    	
    }

     Dimension screenSize= Toolkit.getDefaultToolkit().getScreenSize();
        int h= screenSize.height;
        int w= screenSize.width;
        long xCentre = w/2;
        double sizeFactor = 0.8;
        double baseWidth = sizeFactor * w;
        double baseHeight = sizeFactor * h;
        long width = Math.round(baseWidth) - 130;
        long height= Math.round(baseHeight);
        SimpleDateFormat pbfDateFormat = new SimpleDateFormat("yyyyMMdd");


         
    public static PbfServiceConfigurator  unique_instance;
     private static Object lock = new Object();
    
    private PbfServiceConfigurator() {
        initComponents();
        setLocation((int)(xCentre -(width/3)), (int)(height/3 - 100));
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.setTitle("PBF Server Configuration Manager");
        
    }
public static PbfServiceConfigurator getInstance(){

        if (unique_instance == null)

     synchronized(lock){

        if (unique_instance == null){
            unique_instance = new PbfServiceConfigurator();
             }
         }

        return unique_instance;

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BaseConfigPane = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        javax.swing.ButtonGroup dateModeRadGrp = new javax.swing.ButtonGroup();
        fileSeqNumGrp = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        serverLabel = new javax.swing.JLabel();
        databaseLabel = new javax.swing.JLabel();
        userNamelabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        databaseField = new javax.swing.JTextField();
        outputField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        startDateLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        yesterdayRadBttn = new javax.swing.JRadioButton();
        dateRangeRadBttn = new javax.swing.JRadioButton();
        startDateField = new javax.swing.JTextField();
        endDateField = new javax.swing.JTextField();
        endDateBttn = new javax.swing.JButton();
        startDateBttn = new javax.swing.JButton();
        startBttn = new javax.swing.JButton();
        stopBttn = new javax.swing.JButton();
        closeBttn = new javax.swing.JButton();
        saveBttn = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        serverField = new javax.swing.JTextField();
        outputBttn = new javax.swing.JButton();
        scheduleLabel = new javax.swing.JLabel();
        scheduleOptions = new javax.swing.JComboBox();
        scheduleField = new javax.swing.JTextField();
        fileSequenceLabel = new javax.swing.JLabel();
        fileSequenceField = new javax.swing.JTextField();
        pbfFileDate = new javax.swing.JLabel();
        pbfDateField = new javax.swing.JTextField();
        pbfDateBttn = new javax.swing.JButton();
        defFileDateRad = new javax.swing.JRadioButton();
        spefFileDateRad = new javax.swing.JRadioButton();
        pbfQueryFileLabel = new javax.swing.JLabel();
        pbfQueryFileField = new javax.swing.JTextField();
        pbfQueryFileBttn = new javax.swing.JButton();
        hourOptions = new javax.swing.JComboBox();
        hourMinTimeSeparator = new javax.swing.JLabel();
        secondsOptions = new javax.swing.JComboBox();
        minuteOptions = new javax.swing.JComboBox();
        minSecSeparator = new javax.swing.JLabel();
        timeOfDayLabel = new javax.swing.JLabel();
        mailPanel = new javax.swing.JPanel();
        smtpServerLabel = new javax.swing.JLabel();
        smtpServerField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        emailUserNameField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        sslOnConLabel = new javax.swing.JLabel();
        sslOnConOption = new javax.swing.JComboBox();
        fromLabel = new javax.swing.JLabel();
        fromField = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        toField = new javax.swing.JTextField();
        ccLabel = new javax.swing.JLabel();
        ccField = new javax.swing.JTextField();
        enabledLabel = new javax.swing.JLabel();
        mailEnabledOptions = new javax.swing.JComboBox();
        mailOnErrorLabel = new javax.swing.JLabel();
        mailOnErrorOption = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        headerImageField = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        emailPasswordField = new javax.swing.JPasswordField();
        borderLabel = new javax.swing.JPanel();
        headerBgLabel = new javax.swing.JLabel();
        headerBgField = new javax.swing.JTextField();
        headerBgBttn = new javax.swing.JButton();
        headerFontLabel = new javax.swing.JLabel();
        headerFontField = new javax.swing.JTextField();
        headerFontBttn = new javax.swing.JButton();
        altRowField = new javax.swing.JTextField();
        altRowLabel = new javax.swing.JLabel();
        altRowBttn = new javax.swing.JButton();
        borderField = new javax.swing.JTextField();
        borderBttn = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        fontField = new javax.swing.JTextField();
        fontBttn = new javax.swing.JButton();
        fontLabel = new javax.swing.JLabel();
        mainBar = new javax.swing.JMenuBar();
        exitMenuItem = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        BaseConfigPane.setBackground(new java.awt.Color(204, 204, 204));
        BaseConfigPane.addTab("tab1", jTabbedPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        jTabbedPane2.setBackground(new java.awt.Color(204, 204, 204));
        jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        mainPanel.setBackground(new java.awt.Color(204, 204, 204));

        serverLabel.setText("Server");

        databaseLabel.setText("Database");

        userNamelabel.setText("Username");

        passwordLabel.setText("Password");

        databaseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseFieldActionPerformed(evt);
            }
        });

        outputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFieldActionPerformed(evt);
            }
        });

        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        startDateLabel.setText("Start Date");

        endDateLabel.setText("End Date");

        yesterdayRadBttn.setBackground(new java.awt.Color(204, 204, 204));
        dateModeRadGrp.add(yesterdayRadBttn);
        yesterdayRadBttn.setText("Yesterday");
        yesterdayRadBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesterdayRadBttnActionPerformed(evt);
            }
        });

        dateRangeRadBttn.setBackground(new java.awt.Color(204, 204, 204));
        dateModeRadGrp.add(dateRangeRadBttn);
        dateRangeRadBttn.setText("Date Range");
        dateRangeRadBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateRangeRadBttnActionPerformed(evt);
            }
        });

        startDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateFieldActionPerformed(evt);
            }
        });

        endDateBttn.setText("Date");
        endDateBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateBttnActionPerformed(evt);
            }
        });

        startDateBttn.setText("Date");
        startDateBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateBttnActionPerformed(evt);
            }
        });

        startBttn.setText("Start");
        startBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBttnActionPerformed(evt);
            }
        });

        stopBttn.setText("Stop");
        stopBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBttnActionPerformed(evt);
            }
        });

        closeBttn.setText("Close");
        closeBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBttnActionPerformed(evt);
            }
        });

        saveBttn.setText("Save");
        saveBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBttnActionPerformed(evt);
            }
        });

        outputLabel.setText("PBF File Output Folder");

        serverField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverFieldActionPerformed(evt);
            }
        });

        outputBttn.setText("Browse");
        outputBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBttnActionPerformed(evt);
            }
        });

        scheduleLabel.setText("Schedule");

        scheduleOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seconds", "Minutes", "Hours", "Days" }));
        scheduleOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleOptionsActionPerformed(evt);
            }
        });

        fileSequenceLabel.setText("File Sequence Number");

        fileSequenceField.setText("8888");
        fileSequenceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSequenceFieldActionPerformed(evt);
            }
        });

        pbfFileDate.setText("PBF File Date");

        pbfDateBttn.setText("Date");
        pbfDateBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbfDateBttnActionPerformed(evt);
            }
        });

        defFileDateRad.setBackground(new java.awt.Color(204, 204, 204));
        fileSeqNumGrp.add(defFileDateRad);
        defFileDateRad.setText("Default File Date");
        defFileDateRad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defFileDateRadActionPerformed(evt);
            }
        });

        spefFileDateRad.setBackground(new java.awt.Color(204, 204, 204));
        fileSeqNumGrp.add(spefFileDateRad);
        spefFileDateRad.setText("Specified File Date");
        spefFileDateRad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spefFileDateRadActionPerformed(evt);
            }
        });

        pbfQueryFileLabel.setText("PBF Query File");

        pbfQueryFileBttn.setText("Browse");
        pbfQueryFileBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbfQueryFileBttnActionPerformed(evt);
            }
        });

        hourOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" }));

        hourMinTimeSeparator.setText(":");

        secondsOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        minuteOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        minSecSeparator.setText(":");

        timeOfDayLabel.setText("Time of Day");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startBttn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopBttn)
                        .addGap(109, 109, 109)
                        .addComponent(saveBttn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeBttn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(outputLabel)
                                    .addComponent(scheduleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                        .addComponent(outputBttn))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(scheduleOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(scheduleField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(60, 60, 60)
                                        .addComponent(timeOfDayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(hourOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hourMinTimeSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minuteOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minSecSeparator)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(secondsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(userNamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(32, 32, 32)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(databaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(serverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(32, 32, 32)
                                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(38, 38, 38)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(yesterdayRadBttn)
                                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(startDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(endDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(32, 32, 32)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateRangeRadBttn)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(startDateBttn))
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(endDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(endDateBttn))))
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(pbfFileDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(fileSequenceLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(pbfDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(pbfDateBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(fileSequenceField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(pbfQueryFileLabel))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(defFileDateRad)
                                .addGap(18, 18, 18)
                                .addComponent(spefFileDateRad)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(pbfQueryFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pbfQueryFileBttn)))))
                .addGap(22, 22, 22))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startDateBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(serverField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(serverLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(databaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(databaseField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(endDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(endDateBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(7, 7, 7)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(userNamelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(endDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(yesterdayRadBttn)
                                    .addComponent(dateRangeRadBttn))))))
                .addGap(27, 27, 27)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputLabel)
                    .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(scheduleField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(scheduleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(scheduleOptions))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hourOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(timeOfDayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minuteOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(hourMinTimeSeparator)
                        .addComponent(minSecSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(secondsOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileSequenceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(fileSequenceField, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pbfFileDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbfDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbfDateBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(defFileDateRad)
                    .addComponent(spefFileDateRad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pbfQueryFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbfQueryFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbfQueryFileBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        jTabbedPane2.addTab("Main", mainPanel);

        mailPanel.setBackground(new java.awt.Color(204, 204, 204));

        smtpServerLabel.setText("SMTP Server");

        smtpServerField.setMaximumSize(new java.awt.Dimension(6, 20));

        portLabel.setText("Port");

        userNameLabel.setText("Username");

        jLabel11.setText("Password");

        sslOnConLabel.setText("SSLOnConnect");

        sslOnConOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Yes" }));
        sslOnConOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sslOnConOptionActionPerformed(evt);
            }
        });

        fromLabel.setText("From (Email Address)");

        toLabel.setText("To");

        ccLabel.setText("Cc");

        enabledLabel.setText("Enabed");

        mailEnabledOptions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Yes" }));
        mailEnabledOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailEnabledOptionsActionPerformed(evt);
            }
        });

        mailOnErrorLabel.setText("Send Mail on Error");

        mailOnErrorOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Yes" }));
        mailOnErrorOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailOnErrorOptionActionPerformed(evt);
            }
        });

        jLabel1.setText("Email Header Image");

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        emailPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailPasswordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mailPanelLayout = new javax.swing.GroupLayout(mailPanel);
        mailPanel.setLayout(mailPanelLayout);
        mailPanelLayout.setHorizontalGroup(
            mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mailPanelLayout.createSequentialGroup()
                        .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(smtpServerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sslOnConLabel))
                        .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mailPanelLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(sslOnConOption, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mailPanelLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(smtpServerField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(mailPanelLayout.createSequentialGroup()
                        .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fromLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(toLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ccLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enabledLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mailOnErrorLabel, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ccField, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mailEnabledOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mailOnErrorOption, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headerImageField, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browse)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        mailPanelLayout.setVerticalGroup(
            mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailPanelLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(smtpServerField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smtpServerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mailPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(emailPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sslOnConLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(sslOnConOption))
                .addGap(22, 22, 22)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ccField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ccLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headerImageField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enabledLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailEnabledOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mailOnErrorOption, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mailOnErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        jTabbedPane2.addTab("Mail", mailPanel);

        borderLabel.setBackground(new java.awt.Color(204, 204, 204));

        headerBgLabel.setText("Header Background");

        headerBgField.setEditable(false);
        headerBgField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerBgFieldActionPerformed(evt);
            }
        });

        headerBgBttn.setText("Choose");
        headerBgBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerBgBttnActionPerformed(evt);
            }
        });

        headerFontLabel.setText("Header Font");

        headerFontField.setEditable(false);
        headerFontField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerFontFieldActionPerformed(evt);
            }
        });

        headerFontBttn.setText("Choose");
        headerFontBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerFontBttnActionPerformed(evt);
            }
        });

        altRowField.setEditable(false);
        altRowField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altRowFieldActionPerformed(evt);
            }
        });

        altRowLabel.setText("Alternate Row");

        altRowBttn.setText("Choose");
        altRowBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altRowBttnActionPerformed(evt);
            }
        });

        borderField.setEditable(false);
        borderField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderFieldActionPerformed(evt);
            }
        });

        borderBttn.setText("Choose");
        borderBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borderBttnActionPerformed(evt);
            }
        });

        jLabel20.setText("Border");

        fontField.setEditable(false);
        fontField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontFieldActionPerformed(evt);
            }
        });

        fontBttn.setText("Choose");
        fontBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontBttnActionPerformed(evt);
            }
        });

        fontLabel.setText("Font");

        javax.swing.GroupLayout borderLabelLayout = new javax.swing.GroupLayout(borderLabel);
        borderLabel.setLayout(borderLabelLayout);
        borderLabelLayout.setHorizontalGroup(
            borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borderLabelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(borderLabelLayout.createSequentialGroup()
                        .addComponent(altRowLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(altRowField, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(altRowBttn))
                    .addGroup(borderLabelLayout.createSequentialGroup()
                        .addComponent(headerFontLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(headerFontField, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(headerFontBttn))
                    .addGroup(borderLabelLayout.createSequentialGroup()
                        .addComponent(headerBgLabel)
                        .addGap(18, 18, 18)
                        .addComponent(headerBgField, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(headerBgBttn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, borderLabelLayout.createSequentialGroup()
                        .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fontField, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borderField, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(borderBttn)
                            .addComponent(fontBttn))))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        borderLabelLayout.setVerticalGroup(
            borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borderLabelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerBgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerBgField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerBgBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerFontLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerFontField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headerFontBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altRowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(altRowField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(altRowBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borderField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(borderBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(borderLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontBttn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(330, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Colours", borderLabel);

        mainBar.setBackground(new java.awt.Color(204, 204, 204));

        exitMenuItem.setBackground(new java.awt.Color(204, 204, 204));
        exitMenuItem.setText("File");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        exitMenuItem.add(jMenuItem1);

        mainBar.add(exitMenuItem);

        setJMenuBar(mainBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void databaseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_databaseFieldActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    private void outputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputFieldActionPerformed

    private void dateRangeRadBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateRangeRadBttnActionPerformed
                setDateRangeOption();
    }//GEN-LAST:event_dateRangeRadBttnActionPerformed

    private void yesterdayRadBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesterdayRadBttnActionPerformed
            setYesterdayOption();        
        
    }//GEN-LAST:event_yesterdayRadBttnActionPerformed

    private void endDateBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateBttnActionPerformed
                DatePicker d1 = new DatePicker(this);
                try{ 
                    endDateField.setText(pbfDateFormat.format(d1.GUI("End Date")));
                }catch(NullPointerException e){
                  PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "End Date was not set");
                   showWarningMessage("Start Date  was not set","Date Not Set");
                   if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "End Date was not set");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
               }
    }//GEN-LAST:event_endDateBttnActionPerformed
public void setDefaultFileDate(){
        this.spefFileDateRad.setSelected(false);
        defFileDateRad.setSelected(true);
        this.pbfDateField.setEnabled(false);
}

public void setDateRangeFileDate(){
      defFileDateRad.setSelected(false);
        this.spefFileDateRad.setSelected(true);
        this.pbfDateField.setEnabled(true);
}

public void setYestardayDate(){
        this.yesterdayRadBttn.setSelected(true);
}

public void setDateRange(){
        this.dateRangeRadBttn.setSelected(true);
}





    private void startDateBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateBttnActionPerformed
        // TODO add your handling code here:
                DatePicker d1 = new DatePicker(this);
               try{  
                   
                   startDateField.setText(pbfDateFormat.format(d1.GUI("Start Date")));
               
               } catch(NullPointerException e){
                  PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "Start Date was not set");
                  showWarningMessage("Start Date  was not set","Date Not Set");
                                     if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Start Date was not set");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
               }
    }//GEN-LAST:event_startDateBttnActionPerformed

    private void serverFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serverFieldActionPerformed

    private void pbfDateBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbfDateBttnActionPerformed
              try{
                DatePicker d1 = new DatePicker(this);
                pbfDateField.setText(pbfDateFormat.format(d1.GUI("PBF File Date")));
                 }catch(NullPointerException e){
                  PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "PBF File date  was not set");
                   showWarningMessage("PBF File date  was not set","Date Not Set");
                                      if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "File Date was not set");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
               }
    }//GEN-LAST:event_pbfDateBttnActionPerformed

    private void startDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateFieldActionPerformed
        // TODO add your handling code here:
        
      
    }//GEN-LAST:event_startDateFieldActionPerformed

    private void fileSequenceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSequenceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileSequenceFieldActionPerformed

    private void headerBgFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerBgFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_headerBgFieldActionPerformed

    private void headerBgBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerBgBttnActionPerformed
 Color tmpColour = null;
            	  try{
            		  tmpColour = JColorChooser.showDialog(this,"Select Header Background Color",  getColour(PbfGenerationController.pbfMailer.getHeaderBgdColour()));
            	  }catch(Exception e){
            		  PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                                             if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error changing background color");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            	  }
                this.headerBgField.setText("");
                this.headerBgField.setBackground(tmpColour);
                this.headerBgField.updateUI();
                float[] colorComponents = tmpColour.getRGBColorComponents(null); 
            	PbfGenerationController.pbfMailer.setHeaderBgdColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]); 
                PbfGenerationController.report.setHeaderBgdColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]);
    }//GEN-LAST:event_headerBgBttnActionPerformed

    private void headerFontFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerFontFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_headerFontFieldActionPerformed

    private void headerFontBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerFontBttnActionPerformed
Color tmpColour = null;
            	  try{
            		  tmpColour = JColorChooser.showDialog(this,"Select Header Font Color", getColour(PbfGenerationController.pbfMailer.getHeaderFontColour()));
            	  }catch(Exception e){
            		  PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                                             if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error changing font color");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            	  }
                 this.headerFontField.setText("");
                this.headerFontField.setBackground(tmpColour);
                this.headerFontField.updateUI();
                float[] colorComponents = tmpColour.getRGBColorComponents(null); 
            	PbfGenerationController.pbfMailer.setHeaderFontColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]);         // TODO add your handling code here:
                PbfGenerationController.report.setHeaderFontColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]); 
    }//GEN-LAST:event_headerFontBttnActionPerformed

    private void altRowFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altRowFieldActionPerformed
    
    }//GEN-LAST:event_altRowFieldActionPerformed

    private void altRowBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altRowBttnActionPerformed
              Color tmpColour = null;
        try{
            		  tmpColour = JColorChooser.showDialog(this,"Select Alternate Row Color",  getColour(PbfGenerationController.pbfMailer.getAlternateRowColour()));
            	  }catch(Exception e){
            		  PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                                             if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error changing alternate row color");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            	  }
               this.altRowField.setText("");
                this.altRowField.setBackground(tmpColour);
                this.altRowField.updateUI();
                float[] colorComponents = tmpColour.getRGBColorComponents(null); 
            	PbfGenerationController.pbfMailer.setAlternateRowColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]);         // TODO add your handling code here:
                PbfGenerationController.report.setAlternateRowColour(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]); 
    }//GEN-LAST:event_altRowBttnActionPerformed

    private void borderFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borderFieldActionPerformed

    private void borderBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borderBttnActionPerformed
  
   Color tmpColour = null;
   try{
            		  tmpColour = JColorChooser.showDialog(this,"Select Border Color",  getColour(PbfGenerationController.pbfMailer.getBorderCol()));
            	  }catch(Exception e){
            		  PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                           if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Unable to send notification email.");
                        PbfGenerationController.pbfErrorList.append(e.getMessage());
                        PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                        PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            	  }
                 this.borderField.setText("");
                this.borderField.setBackground(tmpColour);
                this.borderField.updateUI();
                float[] colorComponents = tmpColour.getRGBColorComponents(null); 
                     	PbfGenerationController.pbfMailer.setBorderCol(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]);         // TODO add your handling code here:
                    PbfGenerationController.report.setBorderCol(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]);
    }//GEN-LAST:event_borderBttnActionPerformed

    private void fontFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fontFieldActionPerformed

    private void fontBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontBttnActionPerformed
          Color tmpColour = null;
   try{
            		  tmpColour = JColorChooser.showDialog(this,"Select Border Color",  getColour(PbfGenerationController.pbfMailer.getFontCol()));
            	  }catch(Exception e){
            		  PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                                             if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error changing border color");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            	  }
                 this.fontField.setText("");
                this.fontField.setBackground(tmpColour);
                this.fontField.updateUI();
                float[] colorComponents = tmpColour.getRGBColorComponents(null); 
                     	PbfGenerationController.pbfMailer.setFontCol(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]); 
                        PbfGenerationController.report.setFontCol(colorComponents[0]+","+colorComponents[1]+","+colorComponents[2]); 
    }//GEN-LAST:event_fontBttnActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void sslOnConOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sslOnConOptionActionPerformed
        String ssl = String.valueOf(this.sslOnConOption.getSelectedItem());
        
        boolean iSSL =ssl.equalsIgnoreCase("yes")?true:false;
        PbfGenerationController.pbfMailer.setSslOnConnect(iSSL);
    }//GEN-LAST:event_sslOnConOptionActionPerformed

    private void outputBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputBttnActionPerformed
        File tempDir = new File(".");
    	JFileChooser chosenDir = new JFileChooser();
    	chosenDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	       int retVal= chosenDir.showDialog(this,"Select");
                  if(retVal==JFileChooser.APPROVE_OPTION){
                	  tempDir= chosenDir.getSelectedFile();
                	  outputField.setText(tempDir.getAbsolutePath());
                	  PbfGenerationController.outputFolder = tempDir.getAbsolutePath();
	      }
    }//GEN-LAST:event_outputBttnActionPerformed

    private void pbfQueryFileBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbfQueryFileBttnActionPerformed
        FileNameExtensionFilter  filter = new FileNameExtensionFilter("SQL Files","sql");
              File tempFile = new File(".");
    	JFileChooser chosenFile = new JFileChooser();
    	chosenFile.addChoosableFileFilter(filter);
                  if(chosenFile.showOpenDialog(this)==JFileChooser.APPROVE_OPTION && chosenFile.getSelectedFile().getAbsolutePath().toLowerCase().endsWith("sql")){
                	  tempFile= chosenFile.getSelectedFile();
                	 pbfQueryFileField.setText(tempFile.getAbsolutePath());
                	  PbfGenerationController.pbfQueryFile = tempFile.getAbsolutePath();
	      }else{
                 showWarningMessage("The file selected is not an SQL file","Invalid File Format");
                 }
        
    }//GEN-LAST:event_pbfQueryFileBttnActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
                FileNameExtensionFilter  filter = new FileNameExtensionFilter("Email Header Images","jpeg","jpg","png","gif","tiff");
              File tempFile = new File(".");
    	JFileChooser chosenFile = new JFileChooser();
    	chosenFile.addChoosableFileFilter(filter);
	    
                  if(chosenFile.showOpenDialog(this)==JFileChooser.APPROVE_OPTION && (chosenFile.getSelectedFile().getAbsolutePath().toLowerCase().endsWith("jpeg") ||chosenFile.getSelectedFile().getAbsolutePath().toLowerCase().endsWith("png") ||chosenFile.getSelectedFile().getAbsolutePath().toLowerCase().endsWith("gif") ||chosenFile.getSelectedFile().getAbsolutePath().toLowerCase().endsWith("tiff"))){
                	  tempFile= chosenFile.getSelectedFile();
                	 headerImageField.setText(tempFile.getAbsolutePath());
                	  PbfGenerationController.emailHeaderImage = tempFile.getAbsolutePath();
	      } else{
                 showWarningMessage("The file selected is not an Image file","Invalid File Format");
                 }
    }//GEN-LAST:event_browseActionPerformed

     public String convertToMillis (String type, String value){
    	long scheduleTimeMillis = 0;
    	
    	if("Seconds".equalsIgnoreCase(type)){
    		scheduleTimeMillis = Integer.parseInt(value)*1000;	
    	}else if("Minutes".equalsIgnoreCase(type)){
    		scheduleTimeMillis = Integer.parseInt(value)*1000 *60;
    	}else if("Hours".equalsIgnoreCase(type)){
    		scheduleTimeMillis = Integer.parseInt(value)*1000 *3600;
    	}else if("Days".equalsIgnoreCase(type)){
    		scheduleTimeMillis = Integer.parseInt(value)*1000 *3600*24;
    	}
    	
    	return String.valueOf(scheduleTimeMillis);
    	
    }
    private void saveBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBttnActionPerformed
        String server      =   this.serverField.getText().trim() ;
        String database    =   this.databaseField.getText().trim();
        String userName    =   this.userNameField.getText().trim();
        String password    =   this.passwordField.getText().trim();
        String startDate   =   this.startDateField.getText().trim();
        String EndDate     =   this.endDateField.getText().trim();
        
        String outputFdr   =   this.outputField.getText().trim();
        String schedule    =   this.scheduleField.getText().trim();
        String scheduleOption  = String.valueOf(this.scheduleOptions.getSelectedItem());
         this.scheduleOptions.setSelectedItem((Object)scheduleOption);
        
        String fileSeqNum  =   this.fileSequenceField.getText().trim();
        String pbfDate     =   this.pbfDateField.getText().trim();
        String pbfQueryFile =  this.pbfQueryFileField.getText().trim();
        
        String smtpServer    = this.smtpServerField.getText().trim();
        String port          = this.portField.getText().trim();
        String emailUser     = this.emailUserNameField.getText().trim();
        String emailPassword = this.emailPasswordField.getText().trim();
        String fromAddress   = this.fromField.getText().trim();
        String toAddress    =  this.toField.getText().trim();
        String ccAddress    = this.ccField.getText().trim();
        
        boolean isYesterdaySelected = this.yesterdayRadBttn.isSelected();
        boolean isDateRangeSelected = this.dateRangeRadBttn.isSelected();
        boolean isDefaultFieldDateSel = this.defFileDateRad.isSelected();
        String headerImage = this.headerImageField.getText();
        boolean isDateRangeSel = this.dateRangeRadBttn.isSelected();
        String sslOption  = String.valueOf(this.sslOnConOption.getSelectedItem());
        String mailEnabledOption = String.valueOf(this.mailEnabledOptions.getSelectedItem());
        String sendMailOnErrorOption  = String.valueOf(this.mailOnErrorOption.getSelectedItem());
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Calendar cal = Calendar.getInstance();
        String today  = dateFormat.format(cal.getTime());
        cal.add(Calendar.DATE, -1);    
        String yesterday = dateFormat.format(cal.getTime());
        if(schedule.isEmpty()){
       
          String tempScheduleInputStr =  schedule;
     
            if("Seconds".equalsIgnoreCase(scheduleOption)){
                     tempScheduleInputStr=      tempScheduleInputStr.trim().isEmpty()?"60":     tempScheduleInputStr;
                PbfGenerationController.schedule  = convertToMillis("Seconds", tempScheduleInputStr);
                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"60":     tempScheduleInputStr;
            }else if("Minutes".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"5":     tempScheduleInputStr;

                  PbfGenerationController.schedule  = convertToMillis("Minutes", tempScheduleInputStr);
            }else if("Hours".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;

                  PbfGenerationController.schedule  =convertToMillis("Hours", tempScheduleInputStr);
            }else if("Days".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;

                PbfGenerationController.schedule  = convertToMillis("Days", tempScheduleInputStr);
            }
           }
     if(fileSeqNum.isEmpty()){
        this.fileSequenceField.setText("8888");
     }
     if(pbfDate.isEmpty()){

         this.pbfDateField.setText(today);
     
     }
   
        
        if(server.isEmpty())this.serverField.setText("LOCALHOST");
        if(database.isEmpty()) this.databaseField.setText("postilion_office");
        if(userName.isEmpty()) this.userNameField.setText("officeadmin");
        if(password.isEmpty())this.passwordField.setText("AdminOfficer123");
        if(isYesterdaySelected){
            
            if(startDate.isEmpty())this.startDateField.setText(yesterday);
            if(EndDate.isEmpty())this.endDateField.setText(yesterday);
                 startDateField.setEnabled(false);
                 endDateField.setEnabled(false);
        }    
        else if(isDateRangeSelected){
              if(startDate.isEmpty())this.startDateField.setText(yesterday);
            if(EndDate.isEmpty())this.endDateField.setText(yesterday);
            startDateField.setEnabled(true);
            endDateField.setEnabled(true);   
             }
        if(outputFdr.isEmpty()){
            try {
                this.outputField.setText(new java.io.File( "." ).getCanonicalPath()+"\\output");
            } catch (IOException e) {
             PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                                if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error fetching output directory");
                    PbfGenerationController.pbfErrorList.append(e.getMessage());
                    PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                    PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
            }
        }
        if(smtpServer.isEmpty()){
        this.smtpServerField.setText("172.16.10.223");
        
        }
        if(port.isEmpty()){
         this.portField.setText("25");
        
        }
        if(emailUser.isEmpty()){
         this.emailUserNameField.setText("PbfMailer@interswitchgroup.com");
        }
       if(emailPassword.isEmpty()){
         this.emailPasswordField.setText("");
        }
        if(fromAddress.isEmpty()){
        this.fromField.setText("PbfMailer@interswitchgroup.com");
        }
          if(toAddress.isEmpty()){
        this.toField.setText("mobolaji.aina@interswitchgroup.com");
        }
          
       if(ccAddress.isEmpty()){
            this.ccField.setText("neoandrey@yahoo.com");
        }
        
       if(headerImage.isEmpty()){
        this.headerImageField.setText("etc/interswitch_logo.png");
       }
       PbfGenerationController.saveConfigFile();
        showInformationMessage("Restarting PBF File service", "Restarting Service");
       PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "================================================");
       PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "Restarting PBF File Generation Service ... ");

        try{
	    	Runtime rt = Runtime.getRuntime();
	    	String commands = "";
                commands = "net stop PbfFileService";
	    	Process proc = rt.exec(commands);
   
	    	proc = rt.exec(commands);
                proc.waitFor();
	    	
		} catch (Exception e) {
                        PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                        if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error running stop command");
                        PbfGenerationController.pbfErrorList.append(e.getMessage());
                        PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                        PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
		
		}
         Thread tempThread =  new Thread(){
             public void run(){
          while(PbfGenerationController.isServiceRunning()){
                   
          }
           startBttn.setEnabled(true);
       
             }
         };
         tempThread.start();
         
         try{
	    	Runtime rt = Runtime.getRuntime();
	    	String commands = "";
                commands = "net start PbfFileService";
	    	Process proc = rt.exec(commands);
	    	proc = rt.exec(commands);
	    	proc.waitFor();
		} catch (Exception e) {
                        PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                        if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error running start command");
                        PbfGenerationController.pbfErrorList.append(e.getMessage());
                        PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                        PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
		
		}
          
            tempThread =  new Thread(){
             public void run(){
          while(!PbfGenerationController.isServiceRunning()){
                   
          }
           startBttn.setEnabled(false);
       
             }
         };
         tempThread.start();
         

       showInformationMessage("PBF File service has been successfully restarted", "Service Started");
       PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "PBF File Generation Service has been restarted successfully ");
        PbfGenerationController.pbfLogger.log(java.util.logging.Level.INFO, "================================================");
    }//GEN-LAST:event_saveBttnActionPerformed
public boolean getSelectedSSLOption(){
    return  String.valueOf(this.sslOnConOption.getSelectedItem()).equalsIgnoreCase("yes")?true:false;
}

public String getSelectedSSLOptionValue(){
    return  String.valueOf(this.sslOnConOption.getSelectedItem());
}


public String getFromField(){
    return  String.valueOf(this.fromField.getText());
}
public String getSchedule(){
   return this.scheduleField.getText();
}
public String getScheduleOption(){
   return  String.valueOf(this.scheduleOptions.getSelectedItem());
}
public String getSMTPServer(){
   return this.smtpServerField.getText();

}
public String getHeaderImage(){
return this.headerImageField.getText().trim().isEmpty()?"this.headerImageField.getText().isEmpty()":this.headerImageField.getText();
}
public String getPort(){
   return this.portField.getText();

}

public long getAppSchedule(String schedule,String scheduleOption){
   
    if(schedule.isEmpty()){
       
          String tempScheduleInputStr =  schedule;
            if("Seconds".equalsIgnoreCase(scheduleOption)){
                     tempScheduleInputStr=      tempScheduleInputStr.trim().isEmpty()?"60":     tempScheduleInputStr;
                PbfGenerationController.schedule  = convertToMillis("Seconds", tempScheduleInputStr);
                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"60":     tempScheduleInputStr;
            }else if("Minutes".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"5":     tempScheduleInputStr;

                  PbfGenerationController.schedule  = convertToMillis("Minutes", tempScheduleInputStr);
            }else if("Hours".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;

                  PbfGenerationController.schedule  =convertToMillis("Hours", tempScheduleInputStr);
            }else if("Days".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;

                PbfGenerationController.schedule  = convertToMillis("Days", tempScheduleInputStr);
            }
           }
           return   Integer.parseInt(PbfGenerationController.schedule );
}
    private void emailPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailPasswordFieldActionPerformed

    private void closeBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBttnActionPerformed
         PbfGenerationController.timer2.cancel();
         for(Handler h: PbfGenerationController.pbfLogger.getLogger().getHandlers())
                    {
                        h.close();   
                    }
        this.dispose();        // TODO add your handling code here:
    
         
    }//GEN-LAST:event_closeBttnActionPerformed

    private void mailEnabledOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailEnabledOptionsActionPerformed
      PbfGenerationController.mailEnabled =    String.valueOf(this.mailEnabledOptions.getSelectedItem());
    }//GEN-LAST:event_mailEnabledOptionsActionPerformed

    private void mailOnErrorOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailOnErrorOptionActionPerformed
        PbfGenerationController.mailOnError =    String.valueOf(this.mailEnabledOptions.getSelectedItem());
    }//GEN-LAST:event_mailOnErrorOptionActionPerformed

    private void scheduleOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleOptionsActionPerformed
        String schedule    =   this.scheduleField.getText().trim();
        String scheduleOption  = String.valueOf(this.scheduleOptions.getSelectedItem());
          if(schedule.isEmpty()){
       
          String tempScheduleInputStr =  schedule;
     
            if("Seconds".equalsIgnoreCase(scheduleOption)){
                     tempScheduleInputStr=      tempScheduleInputStr.trim().isEmpty()?"60":     tempScheduleInputStr;
                PbfGenerationController.schedule  = convertToMillis("Seconds", tempScheduleInputStr);
                PbfGenerationController.scheduleOption  = "Seconds";
                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"60":     tempScheduleInputStr;
            }else if("Minutes".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"5":     tempScheduleInputStr;
PbfGenerationController.scheduleOption  = "Minutes";
                  PbfGenerationController.schedule  = convertToMillis("Minutes", tempScheduleInputStr);
            }else if("Hours".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;
PbfGenerationController.scheduleOption  = "Hours";
                  PbfGenerationController.schedule  =convertToMillis("Hours", tempScheduleInputStr);
            }else if("Days".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;
PbfGenerationController.scheduleOption  = "Days";
                PbfGenerationController.schedule  = convertToMillis("Days", tempScheduleInputStr);
            }
           }
    }//GEN-LAST:event_scheduleOptionsActionPerformed

    private void defFileDateRadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defFileDateRadActionPerformed
         String pbfDate     =   this.pbfDateField.getText().trim();
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Calendar cal = Calendar.getInstance();
         String today  = dateFormat.format(cal.getTime());
//        cal.add(Calendar.DATE, -1);    
//        String yesterday = dateFormat.format(cal.getTime());
          if(pbfDate.isEmpty()){

         this.pbfDateField.setText(today);
     }
               this.pbfDateField.setEnabled(false);
    }//GEN-LAST:event_defFileDateRadActionPerformed

    public  void setSchedule (String schedule, String scheduleOption ){
 
          String tempScheduleInputStr =  schedule;

            if("Seconds".equalsIgnoreCase(scheduleOption)){
                     tempScheduleInputStr=      tempScheduleInputStr.trim().isEmpty()?"60":     tempScheduleInputStr;
                 PbfGenerationController.schedule  = convertToMillis("Seconds", tempScheduleInputStr);
                 PbfGenerationController.scheduleOption  = "Seconds";
                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"60":tempScheduleInputStr;
            }else if("Minutes".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"5":     tempScheduleInputStr;
 PbfGenerationController.scheduleOption  = "Minutes";
                  PbfGenerationController.schedule  = convertToMillis("Minutes", tempScheduleInputStr);
            }else if("Hours".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;
 PbfGenerationController.scheduleOption  = "Hours";
                  PbfGenerationController.schedule  =convertToMillis("Hours", tempScheduleInputStr);
            }else if("Days".equalsIgnoreCase(scheduleOption)){
                                 tempScheduleInputStr=      tempScheduleInputStr.isEmpty()?"1":     tempScheduleInputStr;
 PbfGenerationController.scheduleOption  = "Days";
                PbfGenerationController.schedule  = convertToMillis("Days", tempScheduleInputStr);
            }
            
           }
    public void setScheduleText(String schedule){
        this.scheduleField.setText(schedule);
    }
        public void setScheduleOption(String schedule){
        this.scheduleOptions.setSelectedItem((Object)schedule);
    }
    private void spefFileDateRadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spefFileDateRadActionPerformed
        String pbfDate     =   this.pbfDateField.getText().trim();
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
        Calendar cal = Calendar.getInstance();
       String today  = dateFormat.format(cal.getTime());
//        cal.add(Calendar.DATE, -1);    
//        String yesterday = dateFormat.format(cal.getTime());
          if(pbfDate.isEmpty()){

         this.pbfDateField.setText(today);
          }
          this.pbfDateField.setEnabled(true);
    }//GEN-LAST:event_spefFileDateRadActionPerformed
  public void setSpefFileDate(String date){
  this.pbfDateField.setText(date);
 
  }
    private void stopBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBttnActionPerformed

          try{
	    	Runtime rt = Runtime.getRuntime();
	    	String commands = "";
                commands = "net stop PbfFileService";
	    	Process proc = rt.exec(commands);

	    	proc = rt.exec(commands);
	    	
		} catch (Exception e) {
                        PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                        if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error running stop command");
                        PbfGenerationController.pbfErrorList.append(e.getMessage());
                        PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                        PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
		
		}
         Thread tempThread =  new Thread(){
             public void run(){
          while(PbfGenerationController.isServiceRunning()){
                   
          }
           startBttn.setEnabled(true);
        showInformationMessage("PBF File service has been successfully stopped", "Service Stopped");
             }
         };
         tempThread.start();
          
    }//GEN-LAST:event_stopBttnActionPerformed

    private void startBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBttnActionPerformed
          
          try{
	    	Runtime rt = Runtime.getRuntime();
	    	String commands = "";
                commands = "net start PbfFileService";
	    	Process proc = rt.exec(commands);
	    	proc = rt.exec(commands);
	    	
		} catch (Exception e) {
                        PbfGenerationController.pbfLogger.log(java.util.logging.Level.SEVERE, PbfGenerationController.getErrorMessage(e));
                        if(PbfGenerationController.baseFrame.isVisible())PbfGenerationController.baseFrame.showErrorMessage(PbfGenerationController.getErrorMessage(e), "Error running start command");
                        PbfGenerationController.pbfErrorList.append(e.getMessage());
                        PbfGenerationController.pbfErrorList.append("<tr><td>"+PbfGenerationController.getErrorMessage(e)+"</td></tr>");
                        PbfGenerationController.pbfErrorList.append("<tr><td></td></tr>");
		
		}
          
           Thread tempThread =  new Thread(){
             public void run(){
          while(!PbfGenerationController.isServiceRunning()){
                   
          }
           startBttn.setEnabled(false);
          showInformationMessage("PBF File service has been successfully started", "Service Started");
             }
         };
         tempThread.start();
          

           // TODO add your handling code here:
    }//GEN-LAST:event_startBttnActionPerformed
  
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO a this.dispose();
          PbfGenerationController.close();

                 System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
            this.dispose();
          PbfGenerationController.close();

                 System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PbfServiceConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PbfServiceConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PbfServiceConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PbfServiceConfigurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PbfServiceConfigurator().setVisible(true);
            }
        });
    }
    public  void setSMTPField(String smtp){
      smtpServerField.setText(smtp);
   }
    public  void setPortField(String port){
      portField.setText(port);
   }
     public  void setEmailUserNameField(String name){
       this.emailUserNameField.setText(name);
   }
     
     public  void setEmailPasswordField(String pass){
       this.emailPasswordField.setText(pass);
   }
     
  public  void setSSlOnConnectOption(String ssl){ 
        int selInd =ssl.equalsIgnoreCase("yes")?1:0;
        sslOnConOption.setSelectedIndex(selInd);
   }
  
  public  void setFromTextField(String from){ 
        this.fromField.setText(from);
   }
    public void setToTextField(String to){ 
        this.toField.setText(to);
   }
    
   public void setCcTextField(String cc){ 
        this.ccField.setText(cc);
   }
        
   public void setheaderBgColor (String col){
   headerBgField.setBackground(getColour(col));
 
   }
   
    public void setAlternateRowColor (String col){
    this.altRowField.setBackground(getColour(col));

    }
    
   public void setHeaderFontColor (String col){
    this.headerFontField.setBackground(getColour(col));

    }
       public void setFontFieldColor (String col){
    this.fontField.setBackground(getColour(col));

    }
   public void setBorderColor (String col){
    this.borderField.setBackground(getColour(col));

    }

     public Color getColour(String colour){
	 
	    if(colour != null && !colour.equalsIgnoreCase("null")){
	    	String[] rgbValues =colour.split(",");
	    	return new Color (Float.parseFloat(rgbValues[0]),Float.parseFloat(rgbValues[1]),Float.parseFloat(rgbValues[2]));
	    }else{
	    	return null;
	    }
          }
     public  void setDatabaseField(String database){
            databaseField.setText(database);
     }
         public  String getDatabaseField(){
            return  databaseField.getText();
     }
              public  void setDatabaseServerField(String server){
            this.serverField.setText(server);
     }
         public  String getDatabaseServerField(){
            return  serverField.getText();
     }
              public  void setDatabaseUserField(String user){
            this.userNameField.setText(user);
     }
         public  String getDatabaseUserField(){
            return  userNameField.getText();
     }
          public  void setDatabasePassword(String password){
            this.passwordField.setText(password);
     }
        public  String getDatabasePassword(){
           return this.passwordField.getText();
     }
       
       public  void setStartDateField(String date){
               this.startDateField.setText(date);
     }
              public  String getStartDateField(){
                return this.startDateField.getText();
     }
      
                     public  void setEndDateField(String date){
               this.endDateField.setText(date);
     }
              public  String getEndDateField(){
                return this.endDateField.getText();
     }
              
              public void disableStartBttn(){
                  this.startBttn.setEnabled(false);
              }
              public void enableStartBttn(){
                  this.startBttn.setEnabled(true);
              }
              
              public void setYesterdayOption(){
                    this.yesterdayRadBttn.setSelected(true);
                    DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                    Calendar cal = Calendar.getInstance();
                    String today  = dateFormat.format(cal.getTime());
                    cal.add(Calendar.DATE, -1);    
                    this.startDateField.setText(dateFormat.format(cal.getTime()));
                    this.endDateField.setText(dateFormat.format(cal.getTime()));
                   // this.setPbfDateField(dateFormat.format(today));
                    setDefaultDateOption();
                    this.startDateField.setEnabled(false);
                    this.endDateField.setEnabled(false);
                    this.startDateBttn.setEnabled(false);
                    this.endDateBttn.setEnabled(false);
              }
              public boolean getYesterdayOption(){
                return this.yesterdayRadBttn.isSelected();
            
              }
              public String getYesterdayOptionVal(){
                  return  getYesterdayOption()?"1":"0";
              }
              public String getDateRangeOptionVal(){
                  return  this.spefFileDateRad.isSelected() ?"1":"0";
              }
               public String getDefaultFileDateOptionVal(){
                  return  this.defFileDateRad.isSelected() ?"1":"0";
              }
             
              
               public String getMaiEnaledOptionVal(){
                  return   String.valueOf(this.mailEnabledOptions.getSelectedItem());
               }
               public String getMailOnErrorOption(){
                  return   String.valueOf(this.mailOnErrorOption.getSelectedItem());
              }
              
              public String getOutputFolder(){
                return  this.outputField.getText();
              }
              public String getPassword (){
              
                return this.passwordField.getText();              
              }
              
              public String getPbfDate(){
                  return this.getPbfDateField();
              }
              
              public  void setDateRangeOption(){
                this.yesterdayRadBttn.setSelected(false);
                this.startDateField.setEnabled(true);
                this.endDateField.setEnabled(true);
                this.startDateBttn.setEnabled(true);
                this.endDateBttn.setEnabled(true);
              }
              
              public void setOutputField(String output){
              this.outputField.setText(output);
              
              }
              public String getSelectedOutputFolder(){
                return this.outputField.getText();
              }
               public void setFileSequenceNumberField(String seqNum){
              this.fileSequenceField.setText(seqNum);
              
              }
              public String getFileSequenceNumberField(){
                return  this.fileSequenceField.getText();
              }
               public void setPbfDateField(String date){
                    this.pbfDateField.setText(date);
              
              }
              public String getPbfDateField(){
                return  this.pbfDateField.getText();
              }
                public void setDefaultDateOption(){
                  //   this.defFileDateRad.setSelected(true);
                         DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
                       //  Calendar cal = Calendar.getInstance();
                    // cal.add(Calendar.DATE, 0);    
                    this.pbfDateField.setText(dateFormat.format(new Date(System.currentTimeMillis())));
                    setDefaultFileDate();
              }
              public void setStartHourOption(String option){
                 this.hourOptions.setSelectedItem((Object)option);
              }
              public void setStartMinuteOption(String option){
                 this.minuteOptions.setSelectedItem((Object)option);
              }
              public void setStartSecondOption(String option){
                 this.secondsOptions.setSelectedItem((Object)option);
              }
                public String getStartHourOption(){
                 return String.valueOf(hourOptions.getSelectedItem());
              }
              public String getStartMinuteOption(){
                 return String.valueOf(minuteOptions.getSelectedItem());
              }
              public String getStartSecondOption(){
                return  String.valueOf(this.secondsOptions.getSelectedItem());
              }
                
                public void setPbfQueryField(String field){
                  this.pbfQueryFileField.setText(field);
                  this.setDateRangeFileDate();
                }
                 public String getPbfQueryField( ){
                   return pbfQueryFileField.getText();
                }
                 public void setEmailHeaderImage(String field){
                  this.headerImageField. setText(field);
                }
                 public String getEmailHeaderImage( ){
                   return headerImageField.getText();
                }
                 public String getEmailUser( ){
                   return this.emailUserNameField.getText();
                }
                public String getEmailPassword( ){
                   return this.emailPasswordField.getText();
                }
                public String getFrom( ){
                   return this.fromField.getText();
                }
               public String getTo( ){
                   return this.toField.getText();
                }
              public String getCc( ){
                   return this.ccField.getText();
                }
              public void setEmailEnabled(String enabled){
                  this.mailEnabledOptions.setSelectedItem((Object)enabled );
              }
              
              public void setMailOnError(String enabled){
              this.mailOnErrorOption.setSelectedItem((Object)enabled );
              }
//              public void setYesterdayOption(String opt){
//                 this.yesterdayRadBttn.setSelectedItem((Object)opt);
//              }
              
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane BaseConfigPane;
    private javax.swing.JButton altRowBttn;
    private javax.swing.JTextField altRowField;
    private javax.swing.JLabel altRowLabel;
    private javax.swing.JButton borderBttn;
    private javax.swing.JTextField borderField;
    private javax.swing.JPanel borderLabel;
    private javax.swing.JButton browse;
    private javax.swing.JTextField ccField;
    private javax.swing.JLabel ccLabel;
    private javax.swing.JButton closeBttn;
    private javax.swing.JTextField databaseField;
    private javax.swing.JLabel databaseLabel;
    private javax.swing.JRadioButton dateRangeRadBttn;
    private javax.swing.JRadioButton defFileDateRad;
    private javax.swing.JPasswordField emailPasswordField;
    private javax.swing.JTextField emailUserNameField;
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JButton endDateBttn;
    private javax.swing.JTextField endDateField;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JMenu exitMenuItem;
    private javax.swing.ButtonGroup fileSeqNumGrp;
    private javax.swing.JTextField fileSequenceField;
    private javax.swing.JLabel fileSequenceLabel;
    private javax.swing.JButton fontBttn;
    private javax.swing.JTextField fontField;
    private javax.swing.JLabel fontLabel;
    private javax.swing.JTextField fromField;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JButton headerBgBttn;
    private javax.swing.JTextField headerBgField;
    private javax.swing.JLabel headerBgLabel;
    private javax.swing.JButton headerFontBttn;
    private javax.swing.JTextField headerFontField;
    private javax.swing.JLabel headerFontLabel;
    private javax.swing.JTextField headerImageField;
    private javax.swing.JLabel hourMinTimeSeparator;
    private javax.swing.JComboBox hourOptions;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JComboBox mailEnabledOptions;
    private javax.swing.JLabel mailOnErrorLabel;
    private javax.swing.JComboBox mailOnErrorOption;
    private javax.swing.JPanel mailPanel;
    private javax.swing.JMenuBar mainBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel minSecSeparator;
    private javax.swing.JComboBox minuteOptions;
    private javax.swing.JButton outputBttn;
    private javax.swing.JTextField outputField;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton pbfDateBttn;
    private javax.swing.JTextField pbfDateField;
    private javax.swing.JLabel pbfFileDate;
    private javax.swing.JButton pbfQueryFileBttn;
    private javax.swing.JTextField pbfQueryFileField;
    private javax.swing.JLabel pbfQueryFileLabel;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton saveBttn;
    private javax.swing.JTextField scheduleField;
    private javax.swing.JLabel scheduleLabel;
    private javax.swing.JComboBox scheduleOptions;
    private javax.swing.JComboBox secondsOptions;
    private javax.swing.JTextField serverField;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JTextField smtpServerField;
    private javax.swing.JLabel smtpServerLabel;
    private javax.swing.JRadioButton spefFileDateRad;
    private javax.swing.JLabel sslOnConLabel;
    private javax.swing.JComboBox sslOnConOption;
    private javax.swing.JButton startBttn;
    private javax.swing.JButton startDateBttn;
    private javax.swing.JTextField startDateField;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JButton stopBttn;
    private javax.swing.JLabel timeOfDayLabel;
    private javax.swing.JTextField toField;
    private javax.swing.JLabel toLabel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JLabel userNamelabel;
    private javax.swing.JRadioButton yesterdayRadBttn;
    // End of variables declaration//GEN-END:variables
}
